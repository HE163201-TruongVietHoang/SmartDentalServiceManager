// services/materialService.js
// Service layer cho module qu·∫£n l√Ω v·∫≠t t∆∞
// - T·∫•t c·∫£ truy v·∫•n SQL t∆∞∆°ng ·ª©ng tr·ª±c ti·∫øp v·ªõi schema trong script.sql b·∫°n ƒë√£ upload
// - M·ªói h√†m c√≥ comment gi·∫£i th√≠ch m·ª•c ƒë√≠ch, input, output

const { getPool, sql } = require("../config/db");

module.exports = {
  /**
   * getAllMaterials
   * D√†nh cho: Admin
   * M√¥ t·∫£: L·∫•y danh s√°ch t·∫•t c·∫£ v·∫≠t t∆∞ hi·ªán c√≥ c√πng th√¥ng tin t·ªìn kho
   * Tr·∫£ v·ªÅ: array of materials (materialId, materialName, unit, unitPrice, stockQuantity, createdAt, updatedAt)
   */
  async getAllMaterials() {
    const pool = await getPool();
    const result = await pool.request().query(`
      SELECT materialId, materialName, unit, unitPrice, stockQuantity, createdAt, updatedAt
      FROM Materials
      ORDER BY materialId DESC
    `);
    return result.recordset;
  },

  /**
   * getAllTransactions
   * D√†nh cho: Admin
   * M√¥ t·∫£: L·∫•y to√†n b·ªô l·ªãch s·ª≠ giao d·ªãch v·∫≠t t∆∞ (nh·∫≠p, xu·∫•t, tr·∫£, h·ªèng)
   * Join Users ƒë·ªÉ bi·∫øt ai thao t√°c; left join Appointments ƒë·ªÉ xem ca li√™n quan; left join patient name
   */
  async getAllTransactions() {
    const pool = await getPool();
    const result = await pool.request().query(`
      SELECT
        mt.transactionId,
        mt.transactionType,
        mt.quantity,
        mt.transactionDate,
        mt.note,
        mt.appointmentId,
        m.materialId,
        m.materialName,
        u.userId AS operatorId,
        u.fullName AS operatorName,
        a.patientId,
        patient.fullName AS patientName,
        doc.userId AS doctorId,
        doc.fullName AS doctorName
      FROM MaterialTransactions mt
      JOIN Materials m ON mt.materialId = m.materialId
      JOIN Users u ON mt.userId = u.userId
      LEFT JOIN Appointments a ON mt.appointmentId = a.appointmentId
      LEFT JOIN Users patient ON a.patientId = patient.userId
      LEFT JOIN Users doc ON a.doctorId = doc.userId
      ORDER BY mt.transactionDate DESC
    `);
    return result.recordset;
  },

  /**
   * addTransaction
   * D√†nh cho: Nurse (USE/RETURN) ho·∫∑c Admin (IMPORT/DAMAGED)
   * M√¥ t·∫£: Th√™m 1 d√≤ng v√†o MaterialTransactions
   * Input:
   *  - materialId (int)
   *  - userId (int)
   *  - appointmentId (int | null)
   *  - transactionType (string): 'USE'|'RETURN'|'IMPORT'|'DAMAGED'
   *  - quantity (decimal)
   *  - note (string)
   * Tr·∫£ v·ªÅ: object message + inserted transaction id (n·∫øu c·∫ßn)
   *
   * L∆ØU √ù:
   *  - Trigger (n·∫øu b·∫°n t·∫°o trong DB) s·∫Ω update Materials.stockQuantity t·ª± ƒë·ªông.
   *  - N·∫øu b·∫°n ch∆∞a c√≥ trigger, b·∫°n c·∫ßn t·ª± c·∫≠p nh·∫≠t stockQuantity (m√¨nh c√≥ th·ªÉ cung c·∫•p ƒëo·∫°n SQL/logic n·∫øu c·∫ßn).
   */
  async addTransaction({
    materialId,
    userId,
    appointmentId = null,
    transactionType,
    quantity,
    note = null,
  }) {
    const pool = await getPool();
    const transaction = new sql.Transaction(pool);

    try {
      await transaction.begin();

      const request = new sql.Request(transaction);
      request.input("materialId", sql.Int, materialId);

      // üîç 1. L·∫•y s·ªë l∆∞·ª£ng t·ªìn kho hi·ªán t·∫°i
      const stockResult = await request.query(`
      SELECT stockQuantity FROM Materials WHERE materialId = @materialId
    `);

      if (stockResult.recordset.length === 0) {
        throw new Error("Kh√¥ng t√¨m th·∫•y v·∫≠t t∆∞ v·ªõi materialId ƒë√£ cung c·∫•p.");
      }

      const currentStock = parseFloat(stockResult.recordset[0].stockQuantity);
      const qty = parseFloat(quantity);

      // üîç 2. Ki·ªÉm tra lo·∫°i giao d·ªãch + x√°c th·ª±c t·ªìn kho
      if (transactionType === "USE" || transactionType === "DAMAGED") {
        if (currentStock < qty) {
          throw new Error(
            `Kh√¥ng ƒë·ªß t·ªìn kho. Hi·ªán c√≤n ${currentStock}, c·∫ßn ${qty}.`
          );
        }
      }

      // üîπ 3. Ch√®n v√†o b·∫£ng MaterialTransactions
      const insertReq = new sql.Request(transaction);
      insertReq
        .input("materialId", sql.Int, materialId)
        .input("userId", sql.Int, userId)
        .input("appointmentId", sql.Int, appointmentId)
        .input("transactionType", sql.NVarChar(20), transactionType)
        .input("quantity", sql.Decimal(18, 2), qty)
        .input("note", sql.NVarChar(255), note);

      await insertReq.query(`
      INSERT INTO MaterialTransactions
      (materialId, userId, appointmentId, transactionType, quantity, transactionDate, note)
      VALUES (@materialId, @userId, @appointmentId, @transactionType, @quantity, GETDATE(), @note)
    `);

      // üîπ 4. C·∫≠p nh·∫≠t t·ªìn kho trong Materials
      let newStock = currentStock;
      if (transactionType === "IMPORT" || transactionType === "RETURN") {
        newStock += qty;
      } else if (transactionType === "USE" || transactionType === "DAMAGED") {
        newStock -= qty;
      }

      const updateReq = new sql.Request(transaction);
      updateReq.input("materialId", sql.Int, materialId);
      updateReq.input("newStock", sql.Decimal(18, 2), newStock);
      await updateReq.query(`
      UPDATE Materials SET stockQuantity = @newStock, updatedAt = GETDATE()
      WHERE materialId = @materialId
    `);

      await transaction.commit();

      return {
        message: `Transaction ${transactionType} th√†nh c√¥ng.`,
        updatedStock: newStock,
      };
    } catch (err) {
      await transaction.rollback();
      throw err;
    }
  },

  /**
   * addUsedMaterial
   * D√†nh cho: Nurse khi ghi nh·∫≠n v·∫≠t t∆∞ th·ª±c t·∫ø ƒë√£ d√πng cho 1 diagnosisService (c√≥ th·ªÉ t·ª´ appointment)
   * Input:
   *  - diagnosisServiceId (int) OR appointmentId (int) -> service will be found via Diagnoses + DiagnosisServices
   *  - materialId (int)
   *  - quantityUsed (decimal)
   *  - note (string)
   *
   * H√†nh ƒë·ªông:
   *  - N·∫øu client g·ª≠i appointmentId thay v√¨ diagnosisServiceId: t√¨m latest diagnosis cho appointment r·ªìi l·∫•y diagnosisServiceId
   *  - Insert v√†o UsedMaterials (diagnosisServiceId, materialId, usedQuantity, note, createdAt)
   */
  async addUsedMaterial({
    diagnosisServiceId = null,
    appointmentId = null,
    materialId,
    quantityUsed,
    note = null,
  }) {
    const pool = await getPool();

    // N·∫øu ch∆∞a c√≥ diagnosisServiceId nh∆∞ng c√≥ appointmentId -> t√¨m diagnosisId -> diagnosisServiceId (l·∫•y b·∫£n ghi ƒë·∫ßu/take TOP 1)
    if (!diagnosisServiceId && appointmentId) {
      // T√¨m diagnosisId
      const diagRes = await pool
        .request()
        .input("appointmentId", sql.Int, appointmentId).query(`
          SELECT TOP 1 diagnosisId
          FROM Diagnoses
          WHERE appointmentId = @appointmentId
          ORDER BY createdAt DESC
        `);
      if (!diagRes.recordset || diagRes.recordset.length === 0) {
        throw new Error("Kh√¥ng t√¨m th·∫•y diagnosis cho appointmentId n√†y.");
      }
      const diagnosisId = diagRes.recordset[0].diagnosisId;

      // T√¨m diagnosisServiceId
      const dsRes = await pool
        .request()
        .input("diagnosisId", sql.Int, diagnosisId).query(`
          SELECT TOP 1 diagnosisServiceId
          FROM DiagnosisServices
          WHERE diagnosisId = @diagnosisId
          ORDER BY createdAt DESC
        `);
      if (!dsRes.recordset || dsRes.recordset.length === 0) {
        throw new Error(
          "Kh√¥ng t√¨m th·∫•y DiagnosisService t∆∞∆°ng ·ª©ng cho appointment n√†y."
        );
      }
      diagnosisServiceId = dsRes.recordset[0].diagnosisServiceId;
    }

    if (!diagnosisServiceId) {
      throw new Error(
        "C·∫ßn cung c·∫•p diagnosisServiceId ho·∫∑c appointmentId c√≥ diagnosis t∆∞∆°ng ·ª©ng."
      );
    }

    // Insert v√†o UsedMaterials
    await pool
      .request()
      .input("diagnosisServiceId", sql.Int, diagnosisServiceId)
      .input("materialId", sql.Int, materialId)
      .input("usedQuantity", sql.Decimal(18, 2), quantityUsed)
      .input("note", sql.NVarChar(255), note).query(`
        INSERT INTO UsedMaterials (diagnosisServiceId, materialId, usedQuantity, note, createdAt)
        VALUES (@diagnosisServiceId, @materialId, @usedQuantity, @note, GETDATE())
      `);

    return { message: "ƒê√£ ghi nh·∫≠n v·∫≠t t∆∞ s·ª≠ d·ª•ng th·ª±c t·∫ø" };
  },

  /**
   * getTodayAppointments
   * D√†nh cho: Nurse
   * M√¥ t·∫£: L·∫•y danh s√°ch appointment cho ng√†y l√†m vi·ªác hi·ªán t·∫°i.
   * L∆∞u √Ω: Appointments -> Slots -> Schedules c√≥ workDate; do ƒë√≥ ch√∫ng ta join ƒë·ªÉ l·ªçc workDate = GETDATE()
   * Tr·∫£ v·ªÅ: th√¥ng tin appointment + patient + doctor + slot time + service (n·∫øu ƒë√£ c√≥ diagnosis/diagnosisService)
   */
  async getTodayAppointments() {
    const pool = await getPool();
    const result = await pool.request().query(`
      SELECT
        a.appointmentId,
        uPatient.userId AS patientId,
        uPatient.fullName AS patientName,
        uDoc.userId AS doctorId,
        uDoc.fullName AS doctorName,
        sch.workDate,
        sl.startTime,
        sl.endTime,
        ds.serviceId,
        srv.serviceName,
        a.status
      FROM Appointments a
      LEFT JOIN Users uPatient ON a.patientId = uPatient.userId
      LEFT JOIN Users uDoc ON a.doctorId = uDoc.userId
      LEFT JOIN Slots sl ON a.slotId = sl.slotId
      LEFT JOIN Schedules sch ON sl.scheduleId = sch.scheduleId
      LEFT JOIN Diagnoses d ON d.appointmentId = a.appointmentId
      LEFT JOIN DiagnosisServices ds ON ds.diagnosisId = d.diagnosisId
      LEFT JOIN Services srv ON srv.serviceId = ds.serviceId
      WHERE sch.workDate = CAST(GETDATE() AS DATE)
      ORDER BY sl.startTime
    `);
    return result.recordset;
  },

  /**
   * getMaterialsByService
   * D√†nh cho: Nurse
   * M√¥ t·∫£: L·∫•y danh s√°ch v·∫≠t t∆∞ ƒë·ªãnh m·ª©c (ServiceMaterials) cho 1 serviceId
   * Tr·∫£ v·ªÅ: materialId, materialName, unit, standardQuantity
   */
  async getMaterialsByService(serviceId) {
    const pool = await getPool();
    const result = await pool.request().input("serviceId", sql.Int, serviceId)
      .query(`
        SELECT
          sm.id,
          sm.serviceId,
          sm.materialId,
          m.materialName,
          m.unit,
          sm.standardQuantity
        FROM ServiceMaterials sm
        JOIN Materials m ON sm.materialId = m.materialId
        WHERE sm.serviceId = @serviceId
      `);
    return result.recordset;
  },

  /**
   * getMaterialUsageReport
   * D√†nh cho: Admin
   * M√¥ t·∫£: B√°o c√°o so s√°nh "chu·∫©n (ServiceMaterials)" vs "th·ª±c t·∫ø (UsedMaterials)"
   * Tr·∫£ v·ªÅ c√°c c·ªôt: serviceName, materialName, Standard, Actual (usedQuantity), Difference
   */
  async getMaterialUsageReport() {
    const pool = await getPool();
    const result = await pool.request().query(`
      SELECT
        srv.serviceName,
        m.materialName,
        sm.standardQuantity AS Standard,
        um.usedQuantity AS Actual,
        (um.usedQuantity - sm.standardQuantity) AS Difference,
        ds.diagnosisServiceId,
        um.id AS usedRecordId
      FROM UsedMaterials um
      JOIN DiagnosisServices ds ON um.diagnosisServiceId = ds.diagnosisServiceId
      JOIN Services srv ON ds.serviceId = srv.serviceId
      JOIN Materials m ON um.materialId = m.materialId
      LEFT JOIN ServiceMaterials sm ON sm.serviceId = srv.serviceId AND sm.materialId = um.materialId
      ORDER BY srv.serviceName, m.materialName
    `);
    return result.recordset;
  },
};
